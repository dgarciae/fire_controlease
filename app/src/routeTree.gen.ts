/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ProtectedRouteRouteImport } from './routes/_protected/route'
import { Route as authRouteRouteImport } from './routes/(auth)/route'
import { Route as authLogoutRouteImport } from './routes/(auth)/logout'
import { Route as authLoginRouteImport } from './routes/(auth)/login'
import { Route as authForgotPasswordRouteImport } from './routes/(auth)/forgot-password'
import { Route as ProtectedNotificationsIndexRouteImport } from './routes/_protected/notifications/index'
import { Route as ProtectedLeasingContractsIndexRouteImport } from './routes/_protected/leasing-contracts/index'
import { Route as ProtectedLeasingContractsCreateRouteImport } from './routes/_protected/leasing-contracts/create'

const ProtectedRouteRoute = ProtectedRouteRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRouteImport,
} as any)
const authRouteRoute = authRouteRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRouteImport,
} as any)
const authLogoutRoute = authLogoutRouteImport.update({
  id: '/logout',
  path: '/logout',
  getParentRoute: () => authRouteRoute,
} as any)
const authLoginRoute = authLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => authRouteRoute,
} as any)
const authForgotPasswordRoute = authForgotPasswordRouteImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => authRouteRoute,
} as any)
const ProtectedNotificationsIndexRoute =
  ProtectedNotificationsIndexRouteImport.update({
    id: '/notifications/',
    path: '/notifications/',
    getParentRoute: () => ProtectedRouteRoute,
  } as any)
const ProtectedLeasingContractsIndexRoute =
  ProtectedLeasingContractsIndexRouteImport.update({
    id: '/leasing-contracts/',
    path: '/leasing-contracts/',
    getParentRoute: () => ProtectedRouteRoute,
  } as any)
const ProtectedLeasingContractsCreateRoute =
  ProtectedLeasingContractsCreateRouteImport.update({
    id: '/leasing-contracts/create',
    path: '/leasing-contracts/create',
    getParentRoute: () => ProtectedRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof authRouteRouteWithChildren
  '/forgot-password': typeof authForgotPasswordRoute
  '/login': typeof authLoginRoute
  '/logout': typeof authLogoutRoute
  '/leasing-contracts/create': typeof ProtectedLeasingContractsCreateRoute
  '/leasing-contracts': typeof ProtectedLeasingContractsIndexRoute
  '/notifications': typeof ProtectedNotificationsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof authRouteRouteWithChildren
  '/forgot-password': typeof authForgotPasswordRoute
  '/login': typeof authLoginRoute
  '/logout': typeof authLogoutRoute
  '/leasing-contracts/create': typeof ProtectedLeasingContractsCreateRoute
  '/leasing-contracts': typeof ProtectedLeasingContractsIndexRoute
  '/notifications': typeof ProtectedNotificationsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(auth)': typeof authRouteRouteWithChildren
  '/_protected': typeof ProtectedRouteRouteWithChildren
  '/(auth)/forgot-password': typeof authForgotPasswordRoute
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/logout': typeof authLogoutRoute
  '/_protected/leasing-contracts/create': typeof ProtectedLeasingContractsCreateRoute
  '/_protected/leasing-contracts/': typeof ProtectedLeasingContractsIndexRoute
  '/_protected/notifications/': typeof ProtectedNotificationsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/forgot-password'
    | '/login'
    | '/logout'
    | '/leasing-contracts/create'
    | '/leasing-contracts'
    | '/notifications'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/forgot-password'
    | '/login'
    | '/logout'
    | '/leasing-contracts/create'
    | '/leasing-contracts'
    | '/notifications'
  id:
    | '__root__'
    | '/(auth)'
    | '/_protected'
    | '/(auth)/forgot-password'
    | '/(auth)/login'
    | '/(auth)/logout'
    | '/_protected/leasing-contracts/create'
    | '/_protected/leasing-contracts/'
    | '/_protected/notifications/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  authRouteRoute: typeof authRouteRouteWithChildren
  ProtectedRouteRoute: typeof ProtectedRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/logout': {
      id: '/(auth)/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof authLogoutRouteImport
      parentRoute: typeof authRouteRoute
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginRouteImport
      parentRoute: typeof authRouteRoute
    }
    '/(auth)/forgot-password': {
      id: '/(auth)/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof authForgotPasswordRouteImport
      parentRoute: typeof authRouteRoute
    }
    '/_protected/notifications/': {
      id: '/_protected/notifications/'
      path: '/notifications'
      fullPath: '/notifications'
      preLoaderRoute: typeof ProtectedNotificationsIndexRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
    '/_protected/leasing-contracts/': {
      id: '/_protected/leasing-contracts/'
      path: '/leasing-contracts'
      fullPath: '/leasing-contracts'
      preLoaderRoute: typeof ProtectedLeasingContractsIndexRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
    '/_protected/leasing-contracts/create': {
      id: '/_protected/leasing-contracts/create'
      path: '/leasing-contracts/create'
      fullPath: '/leasing-contracts/create'
      preLoaderRoute: typeof ProtectedLeasingContractsCreateRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
  }
}

interface authRouteRouteChildren {
  authForgotPasswordRoute: typeof authForgotPasswordRoute
  authLoginRoute: typeof authLoginRoute
  authLogoutRoute: typeof authLogoutRoute
}

const authRouteRouteChildren: authRouteRouteChildren = {
  authForgotPasswordRoute: authForgotPasswordRoute,
  authLoginRoute: authLoginRoute,
  authLogoutRoute: authLogoutRoute,
}

const authRouteRouteWithChildren = authRouteRoute._addFileChildren(
  authRouteRouteChildren,
)

interface ProtectedRouteRouteChildren {
  ProtectedLeasingContractsCreateRoute: typeof ProtectedLeasingContractsCreateRoute
  ProtectedLeasingContractsIndexRoute: typeof ProtectedLeasingContractsIndexRoute
  ProtectedNotificationsIndexRoute: typeof ProtectedNotificationsIndexRoute
}

const ProtectedRouteRouteChildren: ProtectedRouteRouteChildren = {
  ProtectedLeasingContractsCreateRoute: ProtectedLeasingContractsCreateRoute,
  ProtectedLeasingContractsIndexRoute: ProtectedLeasingContractsIndexRoute,
  ProtectedNotificationsIndexRoute: ProtectedNotificationsIndexRoute,
}

const ProtectedRouteRouteWithChildren = ProtectedRouteRoute._addFileChildren(
  ProtectedRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  authRouteRoute: authRouteRouteWithChildren,
  ProtectedRouteRoute: ProtectedRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
